name: CI/CD

on:
  push:
    branches: [ 'master', 'develop' ]
    paths-ignore: [ '*.md' ]
  pull_request:
    types: [ 'opened', 'synchronize', 'reopened' ]
    paths-ignore: [ '*.md' ]

env:
  PROJECT_ID: "scrumpoker-run"

jobs:

  test:
    name: 'Test project'
    runs-on: ubuntu-latest

    steps:
      - name: 'Cache Go dependencies'
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 'Cache npm dependencies'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 'Setup Node.js'
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: 'Setup Firebase CLI'
        run: |
          npm install -g firebase-tools

      - name: 'Setup Go 1.16'
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: 'Download Go dependencies'
        run: |
          go get

      - name: 'Generate Swagger docs'
        run: |
          go get -u github.com/swaggo/swag/cmd/swag
          ~/go/bin/swag init

      - name: 'Test project'
        run: |
          FIRESTORE_EMULATOR_HOST=localhost:8400
          firebase emulators:exec --only firestore "go test -coverprofile=coverage.out -covermode=atomic -json -v ./... > test-report.out" --token "${{ secrets.FIREBASE_TOKEN }}"

      - name: 'Upload test artifacts'
        uses: actions/upload-artifact@master
        with:
          name: coverage
          path: '*.out'
          if-no-files-found: error

  build:
    name: 'Build project'
    runs-on: ubuntu-latest
    needs: [ "test" ]
    outputs:
      IMAGE_NAME: ${{ steps.build.outputs.IMAGE_NAME }}

    steps:
      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          export_default_credentials: true

      - name: 'Configure Docker registry'
        run: |
          gcloud auth configure-docker

      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v2

      - name: 'Generate Swagger docs'
        run: |
          go get -u github.com/swaggo/swag/cmd/swag
          ~/go/bin/swag init

      - name: 'Generate Docker image'
        id: build
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
             BRANCH=${GITHUB_HEAD_REF}
          else
             BRANCH=${GITHUB_REF#refs/heads/}
          fi
          IMAGE_NAME="us.gcr.io/$PROJECT_ID/api:${BRANCH//\//-}"
          docker build -t $IMAGE_NAME .
          echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"

      - name: 'Push image to registry'
        run: |
          docker push ${{ steps.build.outputs.IMAGE_NAME }}

  deploy:
    name: 'Deploy to Cloud Run'
    runs-on: ubuntu-latest
    needs: [ "build" ]

    steps:
      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          export_default_credentials: true

      - name: 'Deploy to Development Environment'
        if: github.ref != 'refs/heads/master'
        run: |
          gcloud run deploy api-test \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --image ${{ needs.build.outputs.IMAGE_NAME }}

      - name: 'Deploy to Production Environment'
        if: github.ref == 'refs/heads/master'
        run: |
          gcloud run deploy api \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --image ${{ needs.build.outputs.IMAGE_NAME }}

  sonarcloud:
    name: 'SonarCloud'
    runs-on: ubuntu-latest
    needs: [ "test" ]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Download test artifacts'
        uses: actions/download-artifact@master
        with:
          name: coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}